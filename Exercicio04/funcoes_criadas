
LOAD:
    Ciclo de decodificação: //MAR = MEMORY[PC];  PC++;
	    selM1 = sPC;
	    RW = 0;
	    LoadMAR = 1;
	    IncPC = 1;

    Ciclo de execução: // reg[rx] = MEMORY[MAR];
		selM1 = sMAR;
		RW = 0;
		selM2 = sDATA_OUT;
		LoadReg[rx] = 1;


STORE: 
    Ciclo de decodificação: //MAR = MEMORY[PC];  PC++;
	    selM1 = sPC;
	    RW = 0;
	    LoadMAR = 1;
	    IncPC = 1;

    Ciclo de execução: // //MEMORY[MAR] = reg[rx];
	    selM3 = rx;
	    selM5 = sM3;
	    selM1 = sMAR;
	    RW = 1;

LOADI:  // reg[rx] = MEMORY[reg[ry]];
	selM4 = ry;
	selM1 = sM4;
	RW = 0;
	selM2 = sDATA_OUT;
	LoadReg[rx] = 1;


STOREI:     //mem[reg[rx]] = reg[ry];
	selM4 = rx;
	selM3 = ry;
	selM1 = sM4;
	selM5 = sM3;
	RW = 1;


MOV:    //reg[rx] = reg[ry]
	selM4 = ry;
	selM2 = sM4;
	LoadReg[rx] = 1;


ADD / SUB / MULT / DIV / LMOD / LAND / LOR / LXOR / LNOT: // reg[rx] = reg[ry] + reg[rz]; // Soma ou outra operacao
    selM3 = ry;
    selM4 = rz;
    OP = pega_pedaco(IR, 15, 10);
    carry = pega_pedaco(IR, 0, 0);
    selM2 = sULA;
    LoadReg[rx] = 1;
    selM6 = sULA;
    LoadFR = 1;


INC:    //reg[rx]++; Inc Rx ou DEC
	selM3 = rx;
	selM4 = 8;
	if(pega_pedaco(IR, 6, 6) == 0)
		OP = 32;
	else if(pega_pedaco(IR, 6, 6) == 1)
		OP = 33;
	selM2 = sULA;
	LoadReg[rx] = 1;


CMP:   // seta 3 flags: maior, menor ou igual
    //if(rx == ry)
    

